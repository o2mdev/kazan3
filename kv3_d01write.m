% function kv_d01write(filename, src, ...)
%   filename - name of the file
%   src      - Kazan Viewer style src structure
%   ...      - parameter-value comma separated pairs 
%       'format'  - output format 'double' or 'float' 

% boep, 15/09/2006

function kv_d01write(filename, src, varargin)

opt = [];
if nargin > 2
    if ~mod(nargin-2,2)
        for kk=1:2:nargin-3
            opt=setfield(src.ax, lower(varargin{kk}), varargin{kk+1});    
        end
    else error('Wrong amount of arguments')
    end
end

[path,name] = fileparts(filename);
fname = fullfile(path,[name,'.d01']);
dscname = fullfile(path,[name,'.exp']);

if isfield(src, 'fname') 
    orfname = src.fname;
else
    orfname = 'unknown';
end
if ~isfield(src.ax, 'xlabel'), src.ax.xlabel = ','; end
if ~isfield(src.ax, 'ylabel'), src.ax.ylabel = ','; end
if ~isfield(src.ax, 'zlabel'), src.ax.zlabel = ','; end
if ~isfield(src.ax, 'title'),  src.ax.title = ''; end

dim = size(src.y);
dim(end+1:4)=1; dim = dim(1:4);
total = prod(dim);
im = sum(sum(sum(imag(src.y))));
tmpy = reshape(src.y, total,1);

ndim1 = (im~=0) + 1;

% write data
fid=fopen(char(fname),'w', 'ieee-le');
fwrite(fid, ndim1,'uint32');       % number of headers, re/im etc.
if strcmp(safeget(opt, 'format', 'float'), 'double'),
   fwrite(fid,0,'uint32');            % format:0-double,1-float
   sformat='double';
else
   fwrite(fid,1,'uint32');            % format:0-double,1-float
   sformat='float';
end

for k=1:ndim1
  fwrite(fid, sum(dim > 1),'int32');
  fwrite(fid,dim(:),  'int32');
  fwrite(fid,total,'int32');
end
fwrite(fid,real(tmpy),sformat);
if im
  fwrite(fid,imag(tmpy),sformat);
end

fclose(fid);

% write description
fid = fopen(char(dscname), 'w');
fprintf(fid, '[general]\r\n');
fprintf(fid, ['name = ', src.ax.title,'\r\n\r\n']);
if isfield(src.ax,'freq1'), fprintf(fid, 'freq1 = %f GHz\r\n\r\n', src.ax.freq1*1E-9); end
fprintf(fid, '[text]\r\nGenerated by Kazan Viewer\r\n');
fprintf(fid, 'from ''%s''\r\n\r\n[sweep]\r\n', orfname);
% sweep
if im,
    fprintf(fid, 'transient = I,1,1,a,b\r\n');
else
    fprintf(fid, 'transient = I,1,1,a\r\n');
end

labels{1}.axis = 'x';
labels{2}.axis = 'y';
labels{3}.axis = 'z';
for ii=1:min(sum(dim ~= 1),3)
    if dim(ii) ~= 1
        fld = getfield(src.ax, [labels{ii}.axis,'label']);
        labels{ii}.label=strtrim(strtok(fld, ','));
        if strcmp(labels{ii}.label, '?'), labels{ii}.label = 'no'; end
        [tokstr, reststr]=strtok(fld, ',');
        labels{ii}.unit = strtrim(reststr(2:end));
        for jj=1:ii-1
          if strcmp(labels{ii}.label,labels{jj}.label)
            labels{ii}.label = [labels{ii}.label,num2str(ii)];
          end
        end
        fprintf(fid, 'sweep%d = %c,%d,%d,%s\r\n', ...
            ii-1, upper(labels{ii}.axis), dim(ii), 1, labels{ii}.label);
    end
end
fprintf(fid, '\r\n');

fprintf(fid, '[params]\r\n');
for ii=1:min(sum(dim ~= 1),3)
    if dim(ii) ~= 1
        xyz = getfield(src.ax, labels{ii}.axis);
        % try to determine if axis has equally spaced data
        dx = diff(xyz);
        if (sum(dx)/length(dx) - dx(1)) < dx(1)/10
            fprintf(fid, '%s = %g %s to %g %s; %s@none\r\n', ...
                labels{ii}.label, xyz(1), labels{ii}.unit, ...
                xyz(end), labels{ii}.unit, labels{ii}.label);
        else
            str = '';
            for jj=1:length(xyz)
                str = [str, kv_bestunit(src.ax.y(jj), labels{ii}.unit)];
                if jj~=length(xyz), str = [str, ', ']; end;
            end
            fprintf(fid, '%s = %s; %s@none\r\n\r\n', ...
              labels{ii}.label, str, labels{ii}.label);
        end
    end
end

fprintf(fid, '\r\n[aquisition]\r\n');
fprintf(fid, 'a = \r\n');
if im,
   fprintf(fid, 'b = \r\n');
end

if isfield(src, 'dsc')
    fprintf(fid, '\r\n[dsc]\r\n');
    print_fld(fid, '', src.dsc);
end
fclose(fid);

function print_fld(fid, fld_name, value)
type = whos('value');
switch type.class
    case 'char'
        fprintf(fid, '%s=%s\r\n', fld_name, value);
    case 'double'
        sz = size(value);
        if prod(sz) > 30
            % multydumensional array
            if(prod(sz) ~= length(value))
                fprintf(fid, '%s= ??\r\n', fld_name);
            else
                % try to find if value has equally spaced data
                dd = sum(diff(diff(value)))/length(value);
                st = value(2) - value(1);
                if abs(dd) < abs(value(2) - value(1))*.02
                    fprintf(fid, '%s=%d step %d\r\n', fld_name, value(1), st);
                else
                    fprintf(fid, '%s= ??\r\n', fld_name);
                end
            end
        else
            fprintf(fid, '%s=%s\r\n', fld_name, num2str(value));
        end
    case 'struct'
        flds = fieldnames(value);
        for ii=1:length(flds)
            if isempty(fld_name), newfld_name = flds{ii};
            else newfld_name = [fld_name,'_',flds{ii}];
            end
            print_fld(fid, newfld_name, getfield(value,flds{ii})) ;
        end
end
